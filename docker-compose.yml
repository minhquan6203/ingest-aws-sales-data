version: '3'

services:
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - etl-network

  postgres:
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: datawarehouse
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - etl-network

  # Service to initialize the database schema and create necessary tables
  db-init:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: datawarehouse
    command: ["python", "-c", "from src.utils.storage_utils import init_database; init_database()"]
    networks:
      - etl-network

  # Service to create MinIO buckets
  minio-init:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - minio
    environment:
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: ["python", "-c", "from src.utils.storage_utils import init_minio; init_minio()"]
    networks:
      - etl-network

  # Main ETL application for AWS sales data
  aws-sales-etl:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - minio
      - postgres
      - db-init
      - minio-init
    environment:
      MINIO_ENDPOINT: minio:9000
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: datawarehouse
      SPARK_ENDPOINT_INTERNAL: http://minio:9000
      SPARK_ENDPOINT_EXTERNAL: http://minio:9000
    volumes:
      - ./logs:/app/logs
    user: root  # Run as root to ensure write permissions
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    networks:
      - etl-network
    # Run our AWS sales ETL pipeline with full load
    command: ["--full-load"]

networks:
  etl-network:
    driver: bridge

volumes:
  minio-data:
  postgres-data: 